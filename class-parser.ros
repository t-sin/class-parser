#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:babel) :silent t)
  )

(defpackage :ros.script.class-parser.3733376269
  (:use :cl))
(in-package :ros.script.class-parser.3733376269)

(defun read-u4 (stream)
  (let (bytes)
    (dotimes (n 4)
      (push (read-byte stream nil :eof) bytes))
    (nreverse bytes)))

(defun read-u2 (stream)
  (let (bytes)
    (dotimes (n 2)
      (push (read-byte stream nil :eof) bytes))
    (nreverse bytes)))

(defun as-integer (bytes)
  (let ((i 0))
    (dotimes (n (length bytes) i)
      (let ((offset (* n 8)))
        (setf (ldb (byte 8 offset) i) (nth (- (length bytes) n 1) bytes))))))

(defun read-magic (stream)
  (let ((bytes (read-u4 stream)))
    (values bytes (and (every (lambda (e) (typep e '(unsigned-byte 8))) bytes)
                       (loop
                         :for b1 :in bytes
                         :for b2 :in '(#xCA #xFE #xBA #xBE)
                         :always (= b1 b2))))))

(defun read-version (stream)
  (let ((minor-ver (as-integer (read-u2 stream)))
        (major-ver (as-integer (read-u2 stream))))
    (cons major-ver minor-ver)))

(defun read-constant (stream)
  (let ((tag (read-byte stream)))
    (ecase tag
      (7 (let ((name-index (as-integer (read-u2 stream))))
           (list :const/class name-index)))
      (9 :const/field-ref)
      (10 (let ((class-index (as-integer (read-u2 stream)))
                (name-index (as-integer (read-u2 stream))))
            (list :const/method-ref class-index name-index)))
      (11 :const/interface-method-ref)
      (8 :const/string)
      (3 :const/integer)
      (4 :const/float)
      (5 :const/long)
      (6 :const/double)
      (12 (let ((name-index (as-integer (read-u2 stream)))
                (discripter-index (as-integer (read-u2 stream))))
            (list :const/name-and-type name-index discripter-index)))
      (1 (let* ((len (as-integer (read-u2 stream)))
                (buf (make-array len :element-type '(unsigned-byte 8))))
           (read-sequence buf stream :end len)
           (list :const/utf8 buf (babel:octets-to-string buf :encoding :utf-8))))
      (15 :const/method-handle)
      (16 :const/medhot-type)
      (18 :const/invoke-dynamic))))

(defun read-constant-pool (stream)
  (let ((count (as-integer (read-u2 stream)))
        (constants nil))
    ;; entries of constant-pool are index like this: 0 < i < count
    (dotimes (n (1- count) (nreverse constants))
      (push (read-constant stream) constants))))


(defun read-access-flats (stream))
(defun read-this-class (stream))
(defun read-super-class (stream))
(defun read-interfaces (stream))
(defun read-fields (stream))
(defun read-methods (stream))
(defun read-attributes (stream))

(defun read-class-file (pathname)
  (with-open-file (in pathname
                      :direction :input
                      :element-type '(unsigned-byte 8))
    (multiple-value-bind (magic correct?)
        (read-magic in)
      (if (not correct?)
          (error "invalid magic!")
          (format t "(magic . version): ([~{~x~^ ~}] . ~s)~%"
                  magic (read-version in))))
    (read-constant-pool in)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (read-class-file (first argv)))
;;; vim: set ft=lisp lisp:
